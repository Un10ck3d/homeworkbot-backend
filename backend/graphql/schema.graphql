"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:username", "required_without:username"])

      "Search by username."
      username: String @eq @rules(apply: ["prohibits:id", "required_without:id", "username"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      username: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)
}

type Mutation {
  createUser(username: String!, nickname: String!): User
  deleteUser(id: ID): User
}


"Account of a person who uses the homework bot."
type User {
    "Unique primary key."
    id: ID!

    "Unique username."
    username: String!

    "Non-unique nickname."
    nickname: String!

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!

    "Homeworks of user"
    homeworks: [HomeworkProgress!] @hasMany
}

"Homework."
type Homework {
    "Unique primary key."
    id: ID!

    "Name of homework."
    name: String!

    "Link of homework"
    link: String!

    "Subject of homework."
    subject: String!

    "When the homework was created."
    created_at: DateTime!

    "When the homework was last updated."
    updated_at: DateTime!
}

"Homework progress."
type HomeworkProgress {
    "Unique primary key."
    id: ID!

    "The asignment."
    homework: Homework!

    "User of homework."
    owner: User!

    "notes of homework."
    notes: String!

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}
